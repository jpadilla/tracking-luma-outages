name: Generate data files

on:
  schedule:
    - cron:  '0 */3 * * *'
  workflow_dispatch:

jobs:
  data:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: make install

      - name: Scrape
        id: scrape
        continue-on-error: true
        run: python -m src

      - name: Cache Docker images
        if: steps.scrape.outcome == 'failure'
        uses: ScribeMD/docker-cache@0.3.3
        with:
          key: docker-browserless-chrome

      - name: Run browserless
        if: steps.scrape.outcome == 'failure'
        run: |
          docker run -d \
            --name browserless \
            -p 3000:3000 \
            -e "MAX_CONCURRENT_SESSIONS=1" \
            -e "QUEUE_LENGTH=0" \
            browserless/chrome

      - name: Scrape via browserless
        if: steps.scrape.outcome == 'failure'
        run: |
          sleep 5
          curl -s --request POST \
            --url http://localhost:3000/function \
            --header 'Content-Type: application/json' \
            --data '{"code": "module.exports=async({page})=>{await page.goto(\"https://miluma.lumapr.com/outages/serviceStatus\");const xhrResponse=await page.waitForResponse(r=>r.request().url().includes(\"/outage/regionsWithoutService\")&&r.request().method()===\"GET\");const xhrPayload=await xhrResponse.json();return{data:xhrPayload,type:\"application/json\"}};"}' \
            --output /tmp/clients_without_service.json
          jq -r '.' /tmp/clients_without_service.json
          sleep 5
          curl -s --request POST \
            --url http://localhost:3000/function \
            --header 'Content-Type: application/json' \
            --data '{"code": "module.exports=async({page})=>{await page.goto(\"https://miluma.lumapr.com/outages/outageMap\");await page.setViewport({width:1440,height:800,deviceScaleFactor:1});await page.waitForSelector('\''.gm-control-active[title=\"Zoom out\"]'\'',{timeout:0});const zoHandle=await page.$('\''.gm-control-active[title=\"Zoom out\"]'\'');await page.evaluate(b=>{b.click();b.click();b.click();b.click();b.click()},zoHandle);await zoHandle.dispose();let xhrResponse=await page.waitForResponse(r=>r.request().url().includes(\"/outage/municipality/towns\")&&r.request().method()===\"POST\");let xhrPayload=await xhrResponse.json();return{data:xhrPayload,type:\"application/json\"}};"}' \
            --output /tmp/outages.json
          jq -r '.' /tmp/outages.json

      - name: Scrape Alternative
        if: steps.scrape.outcome == 'failure'
        run: python -m src
        env:
          CLIENTS_WITHOUT_SERVICE_FILE: /tmp/clients_without_service.json
          OUTAGES_FILE: /tmp/outages.json

      - name: Cleanup
        if: always()
        run: |
          docker rm --force browserless || true

      - name: Commit to repository
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
          COMMIT_MSG: |
            Add latest data files [skip ci]
        run: |
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git config user.name "$GITHUB_ACTOR"
          git checkout main
          git add .
          git diff --quiet && git diff --staged --quiet || (git commit -m "${COMMIT_MSG}"; git push origin main)

  deploy:
    runs-on: ubuntu-latest
    needs: data
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: make install
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER}}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: Deploy to Cloud Run
        run: |-
          gcloud config set run/region us-central1
          make publish

